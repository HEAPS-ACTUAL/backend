// MODULES
const query = require('../utils/PromisifyQuery');
const openAI = require('openai');
require('dotenv').config({ path: '../.env' });

// FUNCTIONS AND VARIABLES
const { extractTextFromPDF } = require("./FileController");
// const { addNewQuestion } = require('./QuestionController');
// const { addNewOption } = require('./OptionController');

/*
------------------------------------------------------------------------------------------------------------------------------------
SQL DATABASE RELATED FUNCTIONS
------------------------------------------------------------------------------------------------------------------------------------
*/
async function createNewFlashcard(email, flashcardName) {
    try {
        const fid = await determineTheNextFID(email); // FUNCTION DEFINED BELOW
        const sqlQuery = 'Insert into flashcard (UserEmail, FID, FlashcardName) values (?, ?, ?)';
        const insertOk = await query(sqlQuery, [email, fid, flashcardName]);

        if (insertOk) {
            console.log(`Flashcard ${fid} added for ${email}!`);
            return fid;
        }
    }
    catch (error) {
        const msg = `Error adding Flashcard into database`
        console.error(`${msg}: ${error.message}`);
        throw new Error(`${msg}`);
    }
}

async function determineTheNextFID(email) {
    try {
        const sqlQuery = 'Select fid from flashcard where useremail = ? order by fid desc limit 1';
        const returnedData = await query(sqlQuery, [email]);

        if (returnedData.length == 0) {
            return 1; // IF NO Flashcard HAS BEEN CREATED BEFORE, USE NUMBER 1 AS THE NEXT Flashcard ID
        }

        const previousFID = returnedData[0].fid
        const nextFID = previousFID + 1;
        return nextFID;
    }
    catch (error) {
        console.error(`Error determining the next FID: ${error}`)
    }
}

async function deleteFlashcard(req, res) {
    const email = req.body.email;
    const fid = req.body.fid;
    const flashcardName = req.body.flashcardName;

    try {
        const sqlQuery = 'Delete from Flashcard where useremail = ? and fid = ?';
        const deleteOk = await query(sqlQuery, [email, fid]);
        res.status(200).json({ message: `${flashcardName} has been deleted!` });
    }
    catch (error) {
        console.log(`Could not delete ${flashcardName} due to the following error: ${error}`);
        res.status(404).json({ message: `Could not delete ${flashcardName}!` });
    }
}

/*
------------------------------------------------------------------------------------------------------------------------------------
THESE ARE JUST HELPER FUNCTIONS
------------------------------------------------------------------------------------------------------------------------------------
*/
// const extractedText = require("../test_ISAIAH/testpdf");

async function queryChatgptFlashcard(extractedText) {
    const chatgpt = new openAI({ apiKey: process.env.OPENAI_API_KEY });

    try {
        const query =
            `${extractedText} \n\n
        Based on the text above, generate a maximised number of flashcard questions. These questions should test how well I know the content of the given text. \n\n
        
        Use a variety of formats for the questions such as "Define this term", "Describe this process", “True or false”, “Fill in the blank”. There should also be an answer. \n
        
        Generate JSON objects for the questions with fields: "QuestionNumber", "ActualQuestion", "Answer". \n
        
        Format your response exactly like this: \n
        {
        "QuestionNumber": ,
        "ActualQuestion": ,
        "Answer":
        }|||`

        const response = await chatgpt.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: query }],
            temperature: 0,
            max_tokens: 2000,
        })

        console.log(response.choices[0].finish_reason); // ensure that the generation of questions doesnt not stop prematurely
        const questions = response.choices[0].message.content;
        console.log(questions); // check the questions generated by chatgpt

        return questions;
    }
    catch (error) {
        const msg = `An error occurred while generating the flashcard questions`
        console.error(`${msg}: ${error.message}`);
        throw new Error(msg);
    }
}

async function formatAndStoreFlashcard(email, flashcardName, chatgpt_response) {
    try {
        const fid = await createNewFlashcard(email, flashcardName);

        if (!fid) {
            return 'Could not store Flashcard!';
        }

        let array_of_question_obj_strings = chatgpt_response.split('|||').slice(0, -1); // slice to remove last element of array because it is just an empty string

        for (let question_obj_string of array_of_question_obj_strings) {
            let question_obj = JSON.parse(question_obj_string); // this converts a string into a JSON

            const questionText = question_obj['ActualQuestion'];
            const answer = question_obj['Answer'];

            let questionNo = await addNewFlashcardQuestion(email, fid, questionText, answer); // FUNCTION IMPORTED FROM QUESTION CONTROLLER
            
        }

        const everythingOk = true;
        return everythingOk;
    }
    catch (error) {
        throw new Error(`Error Flashcard adding into database: ${error.message}`);
    }
}

/*
------------------------------------------------------------------------------------------------------------------------------------
THIS FUNCTION WILL BE CALLED WHEN USER CLICKS 'GENERATE QUIZ' ON THE FRONTEND
------------------------------------------------------------------------------------------------------------------------------------
*/
async function generateAndStoreFlashcard(req, res) {
    try {
        // CHECK WHETHER USER PRESSES GENERATE flashcard WITHOUT UPLOADING ANYTHING
        if (!req.file) {
            res.status(404).json({ message: "No file uploaded!" });
            throw new Error("No file uploaded");
        }

        const email = req.body.email;
        const flashcardName = req.body.flashcardName;
        const uploadedFile = req.file;

        // console.log(email, flashcardName, difficulty);

        console.log('Extracting text now...');
        const extractedText = await extractTextFromPDF(uploadedFile); // FUNCTION IMPORTED FROM FILE CONTROLLER

        console.log('Querying chatgpt for Flashcard now...');
        const chatgptResponse = await queryChatgptFlashcard(extractedText); // FUNCTION DEFINED ABOVE

        console.log('Questions obtained! Storing them into the database now...');
        const hasBeenStored = await formatAndStoreFlashcard(email, flashcardName, chatgptResponse); // FUNCTION DEFINED ABOVE

        if (hasBeenStored) {
            const msg = 'flashcard, questions and answers have been stored in database!';
            console.log(msg)
            res.status(200).json({ message: msg });
        }
    }
    catch (error) {
        console.error(error.message);
        res.status(404).json({ message: error.message });
    }
}

module.exports = { generateAndStoreFlashcard };
// console.log(queryChatgpt(extractedText)); // for testing